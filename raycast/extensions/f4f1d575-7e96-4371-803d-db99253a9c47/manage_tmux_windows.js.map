{
  "version": 3,
  "sources": ["../src/manage_tmux_windows.tsx", "../src/SelectTermnialApp.tsx", "../src/utils/pathUtils.ts", "../src/utils/terminalUtils.ts", "../src/utils/windowUtils.ts", "../src/config.ts"],
  "sourcesContent": ["import { useState, useEffect } from \"react\";\nimport { List, Icon, Action, ActionPanel, Detail } from \"@raycast/api\";\nimport { SelectTerminalApp } from \"./SelectTermnialApp\";\nimport { checkTerminalSetup } from \"./utils/terminalUtils\";\nimport { getAllWindow, switchToWindow, TmuxWindow, deleteWindow } from \"./utils/windowUtils\";\n\nexport default function ManageTmuxWindows() {\n  const [windows, setWindows] = useState<Array<TmuxWindow & { keyIndex: number }>>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isTerminalSetup, setIsTerminalSetup] = useState(false);\n\n  const setupListWindows = () => {\n    getAllWindow((error, stdout) => {\n      if (error) {\n        console.error(`exec error: ${error}`);\n        setIsLoading(false);\n        return;\n      }\n\n      const lines = stdout.trim().split(\"\\n\");\n\n      if (lines?.length > 0) {\n        let keyIndex = 0;\n        const windows = lines.map((line) => {\n          const [sessionName, windowName, windowIndex] = line.split(\":\");\n          keyIndex += 1; // NOTE: using key index for easily delete and remove window outside the original list\n          return {\n            keyIndex,\n            sessionName,\n            windowIndex: parseInt(windowIndex),\n            windowName,\n          };\n        });\n\n        setWindows(windows);\n      }\n\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      const isSetup = await checkTerminalSetup(setIsTerminalSetup);\n\n      if (!isSetup) {\n        setIsLoading(false);\n        return;\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!isTerminalSetup) {\n      return;\n    }\n\n    // List down all tmux session\n    setIsLoading(true);\n    setupListWindows();\n  }, [isTerminalSetup]);\n\n  return (\n    <>\n      <List isLoading={isLoading}>\n        {windows.map((window, index) => (\n          <List.Item\n            key={index}\n            icon={Icon.Window}\n            title={window.windowName}\n            subtitle={window.sessionName}\n            actions={\n              <ActionPanel>\n                <Action title=\"Switch To Selected Window\" onAction={() => switchToWindow(window, setIsLoading)} />\n                <Action\n                  title=\"Delete This Window\"\n                  onAction={() =>\n                    deleteWindow(window, setIsLoading, () =>\n                      setWindows(windows.filter((w) => w.keyIndex !== window.keyIndex))\n                    )\n                  }\n                  shortcut={{ modifiers: [\"cmd\"], key: \"d\" }}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List>\n\n      {!isTerminalSetup && !isLoading && (\n        <Detail\n          markdown=\"**Setup Default Terminal App Before Usage** `Go to Actions or using Cmd + k`\"\n          actions={\n            <ActionPanel>\n              <Action.Push title=\"Setup Here\" target={<SelectTerminalApp setIsTerminalSetup={setIsTerminalSetup} />} />\n            </ActionPanel>\n          }\n        />\n      )}\n    </>\n  );\n}\n", "import { Action, ActionPanel, Application, Form, Toast, getApplications, showToast, useNavigation } from \"@raycast/api\";\nimport { LocalStorage } from \"@raycast/api\";\n\nimport { useEffect, useState } from \"react\";\nimport { applicationIconFromPath } from \"./utils/pathUtils\";\n\nconst ALLOWED_APPS_BUNDLEID = [\n  \"net.kovidgoyal.kitty\",\n  \"org.alacritty\",\n  \"com.googlecode.iterm2\",\n  \"com.apple.Terminal\",\n  \"dev.warp.Warp-Stable\",\n  \"com.github.wez.wezterm\",\n];\n\nexport const SelectTerminalApp = ({ setIsTerminalSetup }: { setIsTerminalSetup?: (value: boolean) => void }) => {\n  const [apps, setApps] = useState<Application[]>();\n  const [loading, setLoading] = useState(true);\n  const { pop } = useNavigation();\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const apps = (await getApplications()).filter((app) => ALLOWED_APPS_BUNDLEID.includes(app.bundleId || \"\"));\n\n      setApps(apps);\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <Form\n      enableDrafts\n      isLoading={loading}\n      navigationTitle=\"Select Terminal App\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Submit Terminal App Name\"\n            onSubmit={async (values) => {\n              LocalStorage.setItem(\"terminalAppBundleId\", values.terminalAppBundleId);\n              const toast = await showToast({\n                style: Toast.Style.Animated,\n                title: \"Setup Terminal\",\n              });\n\n              toast.style = Toast.Style.Success;\n              toast.message = `Terminal ${values.terminalAppBundleId} is setup successfully for tmux sessioner`;\n\n              setIsTerminalSetup && setIsTerminalSetup(true);\n              pop();\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.Description text=\"Choose your default terminal App\" />\n      <Form.Description text=\"When switch to session, it will open the session in the selected terminal app.\" />\n      <Form.Dropdown id=\"terminalAppBundleId\" isLoading={loading}>\n        {apps?.map((app, index) => (\n          <Form.Dropdown.Item\n            key={index}\n            value={app.bundleId || \"\"}\n            title={app.name}\n            icon={applicationIconFromPath(app.path)}\n          />\n        ))}\n      </Form.Dropdown>\n    </Form>\n  );\n};\n", "// Inspired in here https://github.com/raycast/extensions/blob/bbde227e17134f245eff10e59c8a7c2556da976c/extensions/quit-applications/src/index.tsx#L6\n\nimport { execSync } from \"child_process\";\n\nexport function applicationIconFromPath(path: string): string {\n  /* Example:\n   * '/Applications/Visual Studio Code.app' -> '/Applications/Visual Studio Code.app/Contents/Resources/{file name}.icns'\n   */\n\n  // read path/Contents/Info.plist and look for <key>CFBundleIconFile</key> or <key>CFBundleIconName</key>\n  // the actual icon file is located at path/Contents/Resources/{file name}.icns\n\n  const infoPlist = `${path}/Contents/Info.plist`;\n\n  const possibleIconKeyNames = [\"CFBundleIconFile\", \"CFBundleIconName\"];\n\n  let iconFileName = null;\n\n  for (const keyName of possibleIconKeyNames) {\n    try {\n      iconFileName = execSync([\"plutil\", \"-extract\", keyName, \"raw\", '\"' + infoPlist + '\"'].join(\" \"))\n        .toString()\n        .trim();\n      break;\n    } catch (error) {\n      continue;\n    }\n  }\n\n  if (!iconFileName) {\n    // no icon found. fallback to empty string (no icon)\n    return \"\";\n  }\n\n  // if icon doesn't end with .icns, add it\n  if (!iconFileName.endsWith(\".icns\")) {\n    iconFileName = `${iconFileName}.icns`;\n  }\n\n  const iconPath = `${path}/Contents/Resources/${iconFileName}`;\n  console.log(iconPath);\n  return iconPath;\n}\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\nexport async function checkTerminalSetup(callback: (isTerminalSetup: boolean) => void): Promise<boolean> {\n  const localTerminalAppName = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n\n  const toast = await showToast({\n    style: Toast.Style.Animated,\n    title: \"Checking terminal App setup\",\n  });\n\n  if (!localTerminalAppName) {\n    toast.style = Toast.Style.Failure;\n    toast.title = \"No default terminal setup for tmux sessioner\";\n    callback(false);\n\n    return false;\n  } else {\n    toast.hide();\n    callback(true);\n\n    return true;\n  }\n}\n\nexport async function openTerminal() {\n  const localTerminalAppBundleId = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  execSync(`open -b ${localTerminalAppBundleId}`);\n}\n", "import { ChildProcess, exec, ExecException, execSync } from \"child_process\";\nimport { env } from \"../config\";\nimport { showHUD, showToast, Toast } from \"@raycast/api\";\nimport { openTerminal } from \"./terminalUtils\";\n\nexport interface TmuxWindow {\n  sessionName: string;\n  windowIndex: number;\n  windowName: string;\n}\n\nexport function getAllWindow(\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void\n): ChildProcess {\n  return exec('tmux list-windows -aF \"#{session_name}:#{window_name}:#{window_index}\"', { env }, callback);\n}\nexport async function switchToWindow(window: TmuxWindow, setLoading: (value: boolean) => void) {\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n  setLoading(true);\n  const { sessionName: session, windowIndex, windowName } = window;\n\n  exec(`tmux switch -t ${session}`, { env }, async (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"No tmux client found \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n\n      return;\n    }\n    execSync(`tmux select-window -t ${windowIndex}`, { env });\n\n    try {\n      await openTerminal();\n\n      toast.style = Toast.Style.Success;\n      toast.title = `Switched to window ${windowName}`;\n      await showHUD(`Switched to window ${windowName}`);\n      setLoading(false);\n    } catch (e) {\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Terminal not supported \uD83D\uDE22\";\n      setLoading(false);\n    }\n    return;\n  });\n}\n\nexport async function deleteWindow(window: TmuxWindow, setLoading: (value: boolean) => void, callback: () => void) {\n  setLoading(true);\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n\n  exec(`tmux kill-window -t ${window.sessionName}:${window.windowName}`, { env }, (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Something went wrong \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n      return;\n    }\n\n    toast.style = Toast.Style.Success;\n    toast.title = `Deleted window ${window.windowName}`;\n    callback();\n    setLoading(false);\n  });\n}\n", "export const env = Object.assign({}, process.env, { PATH: \"/usr/local/bin:/usr/bin:/opt/homebrew/bin\" });\n"],
  "mappings": "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",
  "names": ["manage_tmux_windows_exports", "__export", "ManageTmuxWindows", "__toCommonJS", "import_react", "import_api", "import_api", "import_react", "import_child_process", "applicationIconFromPath", "path", "infoPlist", "possibleIconKeyNames", "iconFileName", "keyName", "iconPath", "import_jsx_runtime", "ALLOWED_APPS_BUNDLEID", "SelectTerminalApp", "setIsTerminalSetup", "apps", "setApps", "loading", "setLoading", "pop", "app", "values", "toast", "index", "applicationIconFromPath", "import_api", "import_child_process", "checkTerminalSetup", "callback", "localTerminalAppName", "toast", "openTerminal", "localTerminalAppBundleId", "import_child_process", "env", "import_api", "getAllWindow", "callback", "env", "switchToWindow", "window", "setLoading", "toast", "session", "windowIndex", "windowName", "error", "stdout", "stderr", "openTerminal", "deleteWindow", "import_jsx_runtime", "ManageTmuxWindows", "windows", "setWindows", "isLoading", "setIsLoading", "isTerminalSetup", "setIsTerminalSetup", "setupListWindows", "getAllWindow", "error", "stdout", "lines", "keyIndex", "line", "sessionName", "windowName", "windowIndex", "checkTerminalSetup", "window", "index", "switchToWindow", "deleteWindow", "w", "SelectTerminalApp"]
}
