{
  "version": 3,
  "sources": ["../src/addApplicationToStart.ts", "../src/addApplication.ts", "../src/helpers/getList.ts", "../src/HarpoonError.ts", "../src/helpers/setList.ts", "../src/helpers/unshiftList.ts", "../src/helpers/addItem.ts"],
  "sourcesContent": ["import addApplication from \"./addApplication\";\n\nexport default async function addApplicationToStart() {\n  await addApplication(\"first\");\n}\n", "import { closeMainWindow, getFrontmostApplication, showHUD } from \"@raycast/api\";\nimport addItem from \"./helpers/addItem\";\n\nexport default async function addApplication(position: \"first\" | \"last\") {\n  const application = await getFrontmostApplication();\n\n  if (!application) {\n    return await showHUD(\"No application is running\");\n  }\n\n  const { didAddItem, index } = await addItem(\n    {\n      name: application.name,\n      path: application.path,\n      isSticky: false,\n    },\n    position\n  );\n\n  if (didAddItem) {\n    await showHUD(`\"${application.name}\" added at position ${index + 1}`);\n  } else {\n    await showHUD(`\"${application.name}\" already exists at position ${index + 1}`);\n  }\n\n  await closeMainWindow();\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport HarpoonError, { ErrorCode } from \"../HarpoonError\";\nimport { AppList } from \"../models\";\n\nexport default async function getList(): Promise<AppList> {\n  const list = await LocalStorage.getItem<string>(\"defaultList\").catch(() => {\n    throw new HarpoonError(ErrorCode.unableToGetList);\n  });\n\n  return list ? JSON.parse(list) : [];\n}\n", "export enum ErrorCode {\n  itemNotFound = \"ITEM_NOT_FOUND\",\n  unableToGetList = \"UNABLE_TO_GET_LIST\",\n  unableToSetList = \"UNABLE_TO_SET_LIST\",\n}\n\nconst errorMessages: Record<ErrorCode, string> = {\n  [ErrorCode.itemNotFound]: \"Unable to find application in list\",\n  [ErrorCode.unableToGetList]: \"Unable to get application list\",\n  [ErrorCode.unableToSetList]: \"Unable to set application list\",\n};\n\nexport default class HarpoonError extends Error {\n  public code: ErrorCode;\n\n  constructor(code: ErrorCode) {\n    super(errorMessages[code]);\n\n    this.name = \"HarpoonError\";\n    this.code = code;\n  }\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport HarpoonError, { ErrorCode } from \"../HarpoonError\";\nimport { AppList } from \"../models\";\n\nexport default async function setList(list: AppList): Promise<void> {\n  await LocalStorage.setItem(\"defaultList\", JSON.stringify(list)).catch(() => {\n    throw new HarpoonError(ErrorCode.unableToSetList);\n  });\n}\n", "import { App, AppList } from \"../models\";\n\nexport default function unshiftList(list: AppList, item: App): number {\n  const stickyItems = new Array<[number, App]>();\n\n  let availableIndex = 0;\n\n  // We need to iterate backwards to avoid index shifting\n  for (let index = list.length - 1; index >= 0; index -= 1) {\n    const currentItem = list[index];\n\n    if (currentItem.isSticky) {\n      stickyItems.unshift([index, currentItem]);\n      list.splice(index, 1);\n    }\n  }\n\n  list.unshift(item);\n\n  stickyItems.forEach(([index, item]) => {\n    list.splice(index, 0, item);\n\n    if (availableIndex === index) {\n      availableIndex = index + 1;\n    }\n  });\n\n  return availableIndex;\n}\n", "import { App } from \"../models\";\nimport getList from \"./getList\";\nimport setList from \"./setList\";\nimport unshiftList from \"./unshiftList\";\n\ninterface AddItemResult {\n  didAddItem: boolean;\n  index: number;\n}\n\nexport default async function addItem(item: App, position: \"first\" | \"last\"): Promise<AddItemResult> {\n  const list = await getList();\n\n  const existingIndex = list.findIndex(({ path }) => path === item.path);\n\n  if (existingIndex !== -1) {\n    return {\n      didAddItem: false,\n      index: existingIndex,\n    };\n  }\n\n  let index = list.length;\n\n  if (position === \"first\") {\n    index = unshiftList(list, item);\n  } else {\n    list.push(item);\n  }\n\n  await setList(list);\n\n  return {\n    didAddItem: true,\n    index,\n  };\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAkE,wBCAlE,IAAAC,EAA6B,wBCM7B,IAAMC,EAA2C,CAC/C,CAAC,gBAAsB,EAAG,qCAC1B,CAAC,oBAAyB,EAAG,iCAC7B,CAAC,oBAAyB,EAAG,gCAC/B,EAEqBC,EAArB,cAA0C,KAAM,CAG9C,YAAYC,EAAiB,CAC3B,MAAMF,EAAcE,CAAI,CAAC,EAEzB,KAAK,KAAO,eACZ,KAAK,KAAOA,CACd,CACF,EDjBA,eAAOC,GAAmD,CACxD,IAAMC,EAAO,MAAM,eAAa,QAAgB,aAAa,EAAE,MAAM,IAAM,CACzE,MAAM,IAAIC,sBAAsC,CAClD,CAAC,EAED,OAAOD,EAAO,KAAK,MAAMA,CAAI,EAAI,CAAC,CACpC,CEVA,IAAAE,EAA6B,wBAI7B,eAAOC,EAA+BC,EAA8B,CAClE,MAAM,eAAa,QAAQ,cAAe,KAAK,UAAUA,CAAI,CAAC,EAAE,MAAM,IAAM,CAC1E,MAAM,IAAIC,sBAAsC,CAClD,CAAC,CACH,CCNe,SAARC,EAA6BC,EAAeC,EAAmB,CACpE,IAAMC,EAAc,IAAI,MAEpBC,EAAiB,EAGrB,QAASC,EAAQJ,EAAK,OAAS,EAAGI,GAAS,EAAGA,GAAS,EAAG,CACxD,IAAMC,EAAcL,EAAKI,CAAK,EAE1BC,EAAY,WACdH,EAAY,QAAQ,CAACE,EAAOC,CAAW,CAAC,EACxCL,EAAK,OAAOI,EAAO,CAAC,GAIxB,OAAAJ,EAAK,QAAQC,CAAI,EAEjBC,EAAY,QAAQ,CAAC,CAACE,EAAOH,CAAI,IAAM,CACrCD,EAAK,OAAOI,EAAO,EAAGH,CAAI,EAEtBE,IAAmBC,IACrBD,EAAiBC,EAAQ,EAE7B,CAAC,EAEMD,CACT,CClBA,eAAOG,EAA+BC,EAAWC,EAAoD,CACnG,IAAMC,EAAO,MAAMC,EAAQ,EAErBC,EAAgBF,EAAK,UAAU,CAAC,CAAE,KAAAG,CAAK,IAAMA,IAASL,EAAK,IAAI,EAErE,GAAII,IAAkB,GACpB,MAAO,CACL,WAAY,GACZ,MAAOA,CACT,EAGF,IAAIE,EAAQJ,EAAK,OAEjB,OAAID,IAAa,QACfK,EAAQC,EAAYL,EAAMF,CAAI,EAE9BE,EAAK,KAAKF,CAAI,EAGhB,MAAMQ,EAAQN,CAAI,EAEX,CACL,WAAY,GACZ,MAAAI,CACF,CACF,CLjCA,eAAOG,EAAsCC,EAA4B,CACvE,IAAMC,EAAc,QAAM,2BAAwB,EAElD,GAAI,CAACA,EACH,OAAO,QAAM,WAAQ,2BAA2B,EAGlD,GAAM,CAAE,WAAAC,EAAY,MAAAC,CAAM,EAAI,MAAMC,EAClC,CACE,KAAMH,EAAY,KAClB,KAAMA,EAAY,KAClB,SAAU,EACZ,EACAD,CACF,EAEIE,EACF,QAAM,WAAQ,IAAID,EAAY,2BAA2BE,EAAQ,GAAG,EAEpE,QAAM,WAAQ,IAAIF,EAAY,oCAAoCE,EAAQ,GAAG,EAG/E,QAAM,mBAAgB,CACxB,CDxBA,eAAOE,GAA+C,CACpD,MAAMC,EAAe,OAAO,CAC9B",
  "names": ["addApplicationToStart_exports", "__export", "addApplicationToStart", "__toCommonJS", "import_api", "import_api", "errorMessages", "HarpoonError", "code", "getList", "list", "HarpoonError", "import_api", "setList", "list", "HarpoonError", "unshiftList", "list", "item", "stickyItems", "availableIndex", "index", "currentItem", "addItem", "item", "position", "list", "getList", "existingIndex", "path", "index", "unshiftList", "setList", "addApplication", "position", "application", "didAddItem", "index", "addItem", "addApplicationToStart", "addApplication"]
}
