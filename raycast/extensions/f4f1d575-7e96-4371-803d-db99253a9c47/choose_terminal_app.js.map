{
  "version": 3,
  "sources": ["../src/choose_terminal_app.tsx", "../src/SelectTermnialApp.tsx", "../src/utils/pathUtils.ts"],
  "sourcesContent": ["import { SelectTerminalApp } from \"./SelectTermnialApp\";\n\nexport default function ChooseTerminalApp() {\n  return <SelectTerminalApp />;\n}\n", "import { Action, ActionPanel, Application, Form, Toast, getApplications, showToast, useNavigation } from \"@raycast/api\";\nimport { LocalStorage } from \"@raycast/api\";\n\nimport { useEffect, useState } from \"react\";\nimport { applicationIconFromPath } from \"./utils/pathUtils\";\n\nconst ALLOWED_APPS_BUNDLEID = [\n  \"net.kovidgoyal.kitty\",\n  \"org.alacritty\",\n  \"com.googlecode.iterm2\",\n  \"com.apple.Terminal\",\n  \"dev.warp.Warp-Stable\",\n  \"com.github.wez.wezterm\",\n];\n\nexport const SelectTerminalApp = ({ setIsTerminalSetup }: { setIsTerminalSetup?: (value: boolean) => void }) => {\n  const [apps, setApps] = useState<Application[]>();\n  const [loading, setLoading] = useState(true);\n  const { pop } = useNavigation();\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const apps = (await getApplications()).filter((app) => ALLOWED_APPS_BUNDLEID.includes(app.bundleId || \"\"));\n\n      setApps(apps);\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <Form\n      enableDrafts\n      isLoading={loading}\n      navigationTitle=\"Select Terminal App\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Submit Terminal App Name\"\n            onSubmit={async (values) => {\n              LocalStorage.setItem(\"terminalAppBundleId\", values.terminalAppBundleId);\n              const toast = await showToast({\n                style: Toast.Style.Animated,\n                title: \"Setup Terminal\",\n              });\n\n              toast.style = Toast.Style.Success;\n              toast.message = `Terminal ${values.terminalAppBundleId} is setup successfully for tmux sessioner`;\n\n              setIsTerminalSetup && setIsTerminalSetup(true);\n              pop();\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.Description text=\"Choose your default terminal App\" />\n      <Form.Description text=\"When switch to session, it will open the session in the selected terminal app.\" />\n      <Form.Dropdown id=\"terminalAppBundleId\" isLoading={loading}>\n        {apps?.map((app, index) => (\n          <Form.Dropdown.Item\n            key={index}\n            value={app.bundleId || \"\"}\n            title={app.name}\n            icon={applicationIconFromPath(app.path)}\n          />\n        ))}\n      </Form.Dropdown>\n    </Form>\n  );\n};\n", "// Inspired in here https://github.com/raycast/extensions/blob/bbde227e17134f245eff10e59c8a7c2556da976c/extensions/quit-applications/src/index.tsx#L6\n\nimport { execSync } from \"child_process\";\n\nexport function applicationIconFromPath(path: string): string {\n  /* Example:\n   * '/Applications/Visual Studio Code.app' -> '/Applications/Visual Studio Code.app/Contents/Resources/{file name}.icns'\n   */\n\n  // read path/Contents/Info.plist and look for <key>CFBundleIconFile</key> or <key>CFBundleIconName</key>\n  // the actual icon file is located at path/Contents/Resources/{file name}.icns\n\n  const infoPlist = `${path}/Contents/Info.plist`;\n\n  const possibleIconKeyNames = [\"CFBundleIconFile\", \"CFBundleIconName\"];\n\n  let iconFileName = null;\n\n  for (const keyName of possibleIconKeyNames) {\n    try {\n      iconFileName = execSync([\"plutil\", \"-extract\", keyName, \"raw\", '\"' + infoPlist + '\"'].join(\" \"))\n        .toString()\n        .trim();\n      break;\n    } catch (error) {\n      continue;\n    }\n  }\n\n  if (!iconFileName) {\n    // no icon found. fallback to empty string (no icon)\n    return \"\";\n  }\n\n  // if icon doesn't end with .icns, add it\n  if (!iconFileName.endsWith(\".icns\")) {\n    iconFileName = `${iconFileName}.icns`;\n  }\n\n  const iconPath = `${path}/Contents/Resources/${iconFileName}`;\n  console.log(iconPath);\n  return iconPath;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAyG,wBACzGA,EAA6B,wBAE7BC,EAAoC,iBCDpC,IAAAC,EAAyB,yBAElB,SAASC,EAAwBC,EAAsB,CAQ5D,IAAMC,EAAY,GAAGD,wBAEfE,EAAuB,CAAC,mBAAoB,kBAAkB,EAEhEC,EAAe,KAEnB,QAAWC,KAAWF,EACpB,GAAI,CACFC,KAAe,YAAS,CAAC,SAAU,WAAYC,EAAS,MAAO,IAAMH,EAAY,GAAG,EAAE,KAAK,GAAG,CAAC,EAC5F,SAAS,EACT,KAAK,EACR,KACF,MAAE,CACA,QACF,CAGF,GAAI,CAACE,EAEH,MAAO,GAIJA,EAAa,SAAS,OAAO,IAChCA,EAAe,GAAGA,UAGpB,IAAME,EAAW,GAAGL,wBAA2BG,IAC/C,eAAQ,IAAIE,CAAQ,EACbA,CACT,CDXI,IAAAC,EAAA,6BAzBEC,EAAwB,CAC5B,uBACA,gBACA,wBACA,qBACA,uBACA,wBACF,EAEaC,EAAoB,CAAC,CAAE,mBAAAC,CAAmB,IAAyD,CAC9G,GAAM,CAACC,EAAMC,CAAO,KAAI,YAAwB,EAC1C,CAACC,EAASC,CAAU,KAAI,YAAS,EAAI,EACrC,CAAE,IAAAC,CAAI,KAAI,iBAAc,EAE9B,sBAAU,IAAM,EACb,SAAY,CACXD,EAAW,EAAI,EACf,IAAMH,GAAQ,QAAM,mBAAgB,GAAG,OAAQK,GAAQR,EAAsB,SAASQ,EAAI,UAAY,EAAE,CAAC,EAEzGJ,EAAQD,CAAI,EACZG,EAAW,EAAK,CAClB,GAAG,CACL,EAAG,CAAC,CAAC,KAGH,QAAC,QACC,aAAY,GACZ,UAAWD,EACX,gBAAgB,sBAChB,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CACC,MAAM,2BACN,SAAU,MAAOI,GAAW,CAC1B,eAAa,QAAQ,sBAAuBA,EAAO,mBAAmB,EACtE,IAAMC,EAAQ,QAAM,aAAU,CAC5B,MAAO,QAAM,MAAM,SACnB,MAAO,gBACT,CAAC,EAEDA,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAU,YAAYD,EAAO,+DAEnCP,GAAsBA,EAAmB,EAAI,EAC7CK,EAAI,CACN,EACF,EACF,EAGF,oBAAC,OAAK,YAAL,CAAiB,KAAK,mCAAmC,KAC1D,OAAC,OAAK,YAAL,CAAiB,KAAK,iFAAiF,KACxG,OAAC,OAAK,SAAL,CAAc,GAAG,sBAAsB,UAAWF,EAChD,SAAAF,GAAM,IAAI,CAACK,EAAKG,OACf,OAAC,OAAK,SAAS,KAAd,CAEC,MAAOH,EAAI,UAAY,GACvB,MAAOA,EAAI,KACX,KAAMI,EAAwBJ,EAAI,IAAI,GAHjCG,CAIP,CACD,EACH,GACF,CAEJ,EDnES,IAAAE,EAAA,6BADM,SAARC,GAAqC,CAC1C,SAAO,OAACC,EAAA,EAAkB,CAC5B",
  "names": ["choose_terminal_app_exports", "__export", "ChooseTerminalApp", "__toCommonJS", "import_api", "import_react", "import_child_process", "applicationIconFromPath", "path", "infoPlist", "possibleIconKeyNames", "iconFileName", "keyName", "iconPath", "import_jsx_runtime", "ALLOWED_APPS_BUNDLEID", "SelectTerminalApp", "setIsTerminalSetup", "apps", "setApps", "loading", "setLoading", "pop", "app", "values", "toast", "index", "applicationIconFromPath", "import_jsx_runtime", "ChooseTerminalApp", "SelectTerminalApp"]
}
