{
  "version": 3,
  "sources": ["../src/create_new_session.tsx", "../src/utils/sessionUtils.ts", "../src/config.ts", "../src/utils/terminalUtils.ts"],
  "sourcesContent": ["import { useState } from \"react\";\nimport { Action, ActionPanel, Form, popToRoot, showToast, Toast } from \"@raycast/api\";\nimport { creatNewSession, getAllSession } from \"./utils/sessionUtils\";\n\nexport default function CreateNewTmuxSession() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [sessionNameError, setSessionNameError] = useState<string>(\"\");\n\n  return (\n    <Form\n      isLoading={loading}\n      navigationTitle=\"Create New Tmux Session\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Create New Session\"\n            onSubmit={async (values) => {\n              const sessionName = values.newSessionName;\n              setLoading(true);\n\n              const toast = await showToast({\n                style: Toast.Style.Animated,\n                title: \"\",\n              });\n\n              creatNewSession(sessionName, (error, stdout, stderr) => {\n                if (error || stderr) {\n                  console.error(`exec error: ${error}`);\n                  setLoading(false);\n                  toast.style = Toast.Style.Failure;\n                  toast.message = \"Failed to create new session\";\n                  return;\n                }\n\n                toast.style = Toast.Style.Success;\n                toast.style = Toast.Style.Success;\n                toast.message = `New session ${sessionName} is setup successfully`;\n                setLoading(false);\n                popToRoot();\n              });\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        title=\"New Session Name\"\n        id=\"newSessionName\"\n        error={sessionNameError}\n        onChange={(value) => {\n          if (!value || value.length === 0) {\n            return;\n          }\n\n          getAllSession((error, stdout, stderr) => {\n            if (error || stderr) {\n              console.error(`exec error: ${error}`);\n              setLoading(false);\n            }\n\n            const lines = stdout.trim().split(\"\\n\");\n\n            if (lines.includes(value)) {\n              setSessionNameError(\"Session name already exists\");\n            } else {\n              setSessionNameError(\"\");\n            }\n          });\n        }}\n      />\n    </Form>\n  );\n}\n", "import { ChildProcess, exec, ExecException, execSync } from \"child_process\";\nimport { env } from \"../config\";\nimport { closeMainWindow, LocalStorage, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { openTerminal } from \"./terminalUtils\";\n\nexport function getAllSession(\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void\n): ChildProcess {\n  return exec(`tmux list-sessions | awk '{print $1}' | sed 's/://'`, { env }, callback);\n}\n\nexport function creatNewSession(\n  sessionName: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void\n): ChildProcess {\n  return exec(`tmux new-session -d -s ${sessionName}`, { env }, callback);\n}\n\nexport function renameSession(\n  oldSessionName: string,\n  newSessionName: string,\n  callback: (error: ExecException | null, stdout: string, stderr: string) => void\n): ChildProcess {\n  return exec(`tmux rename-session -t ${oldSessionName} ${newSessionName}`, { env }, callback);\n}\n\nexport async function switchToSession(session: string, setLoading: (value: boolean) => void) {\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n  setLoading(true);\n\n  exec(`tmux switch -t ${session}`, { env }, async (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"No tmux client found \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n\n      return;\n    }\n\n    try {\n      await openTerminal();\n\n      toast.style = Toast.Style.Success;\n      toast.title = `Switched to session ${session}`;\n      await showHUD(`Switched to session ${session}`);\n      setLoading(false);\n    } catch (e) {\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Terminal not supported \uD83D\uDE22\";\n      setLoading(false);\n    }\n    return;\n  });\n}\n\nexport async function deleteSession(session: string, setLoading: (value: boolean) => void, callback: () => void) {\n  setLoading(true);\n  const toast = await showToast({ style: Toast.Style.Animated, title: \"\" });\n\n  exec(`tmux kill-session -t ${session}`, { env }, (error, stdout, stderr) => {\n    if (error || stderr) {\n      console.error(`exec error: ${error || stderr}`);\n\n      toast.style = Toast.Style.Failure;\n      toast.title = \"Something went wrong \uD83D\uDE22\";\n      toast.message = error ? error.message : stderr;\n      setLoading(false);\n      return;\n    }\n\n    toast.style = Toast.Style.Success;\n    toast.title = `Deleted session ${session}`;\n    callback();\n    setLoading(false);\n  });\n}\n", "export const env = Object.assign({}, process.env, { PATH: \"/usr/local/bin:/usr/bin:/opt/homebrew/bin\" });\n", "import { LocalStorage, showToast, Toast } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\nexport async function checkTerminalSetup(callback: (isTerminalSetup: boolean) => void): Promise<boolean> {\n  const localTerminalAppName = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n\n  const toast = await showToast({\n    style: Toast.Style.Animated,\n    title: \"Checking terminal App setup\",\n  });\n\n  if (!localTerminalAppName) {\n    toast.style = Toast.Style.Failure;\n    toast.title = \"No default terminal setup for tmux sessioner\";\n    callback(false);\n\n    return false;\n  } else {\n    toast.hide();\n    callback(true);\n\n    return true;\n  }\n}\n\nexport async function openTerminal() {\n  const localTerminalAppBundleId = await LocalStorage.getItem<string>(\"terminalAppBundleId\");\n  execSync(`open -b ${localTerminalAppBundleId}`);\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAyB,iBACzBC,EAAuE,wBCDvE,IAAAC,EAA4D,yBCArD,IAAMC,EAAM,OAAO,OAAO,CAAC,EAAG,QAAQ,IAAK,CAAE,KAAM,2CAA4C,CAAC,EDEvG,IAAAC,EAAyE,wBEFzE,IAAAC,EAA+C,wBFKxC,SAASC,EACdC,EACc,CACd,SAAO,QAAK,sDAAuD,CAAE,IAAAC,CAAI,EAAGD,CAAQ,CACtF,CAEO,SAASE,EACdC,EACAH,EACc,CACd,SAAO,QAAK,0BAA0BG,IAAe,CAAE,IAAAF,CAAI,EAAGD,CAAQ,CACxE,CDFU,IAAAI,EAAA,6BAVK,SAARC,GAAwC,CAC7C,GAAM,CAACC,EAASC,CAAU,KAAI,YAAkB,EAAK,EAC/C,CAACC,EAAkBC,CAAmB,KAAI,YAAiB,EAAE,EAEnE,SACE,OAAC,QACC,UAAWH,EACX,gBAAgB,0BAChB,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CACC,MAAM,qBACN,SAAU,MAAOI,GAAW,CAC1B,IAAMC,EAAcD,EAAO,eAC3BH,EAAW,EAAI,EAEf,IAAMK,EAAQ,QAAM,aAAU,CAC5B,MAAO,QAAM,MAAM,SACnB,MAAO,EACT,CAAC,EAEDC,EAAgBF,EAAa,CAACG,EAAOC,EAAQC,IAAW,CACtD,GAAIF,GAASE,EAAQ,CACnB,QAAQ,MAAM,eAAeF,GAAO,EACpCP,EAAW,EAAK,EAChBK,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAU,+BAChB,OAGFA,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,MAAQ,QAAM,MAAM,QAC1BA,EAAM,QAAU,eAAeD,0BAC/BJ,EAAW,EAAK,KAChB,aAAU,CACZ,CAAC,CACH,EACF,EACF,EAGF,mBAAC,OAAK,UAAL,CACC,MAAM,mBACN,GAAG,iBACH,MAAOC,EACP,SAAWS,GAAU,CACf,CAACA,GAASA,EAAM,SAAW,GAI/BC,EAAc,CAACJ,EAAOC,EAAQC,IAAW,EACnCF,GAASE,KACX,QAAQ,MAAM,eAAeF,GAAO,EACpCP,EAAW,EAAK,GAGJQ,EAAO,KAAK,EAAE,MAAM;AAAA,CAAI,EAE5B,SAASE,CAAK,EACtBR,EAAoB,6BAA6B,EAEjDA,EAAoB,EAAE,CAE1B,CAAC,CACH,EACF,EACF,CAEJ",
  "names": ["create_new_session_exports", "__export", "CreateNewTmuxSession", "__toCommonJS", "import_react", "import_api", "import_child_process", "env", "import_api", "import_api", "getAllSession", "callback", "env", "creatNewSession", "sessionName", "import_jsx_runtime", "CreateNewTmuxSession", "loading", "setLoading", "sessionNameError", "setSessionNameError", "values", "sessionName", "toast", "creatNewSession", "error", "stdout", "stderr", "value", "getAllSession"]
}
